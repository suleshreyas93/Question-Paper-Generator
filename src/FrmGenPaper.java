/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
//import com.itextpdf.text.Element;
//import com.itextpdf.text.Font;
//import com.itextpdf.text.PageSize;
//import com.itextpdf.text.Paragraph;
//import com.itextpdf.text.pdf.PdfPCell;
//import com.itextpdf.text.pdf.PdfPTable;
//import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.*;
import java.sql.*;
import java.util.Random;
import mypack.*;

public class FrmGenPaper extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrmGenPaper
     */
     Random R=new Random();
    int []funit;
    int fin=0;
   int []fmarks;
   int []final_qid;
   int fmainq[];
   int fsubq[];
    int sid[],count=0;
    String sql,exam_id,ppr_id,subject;
    int sub_id=0,mainQ=0,tol=0;
    
     boolean flag=true;
    
    int mainCount=0;
    int subCount=0;
    Dimension d;
    
    public FrmGenPaper() {
        initComponents();
       
        
    }
    public FrmGenPaper(int sid,int mainquest,String eid,int ttl)
    {
        initComponents();
        connect_me.connect_all();
        
        Image im= Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/abstract-pastel-blue-white-background-design-34948659.jpg"));
      
        Dimension dim= Toolkit.getDefaultToolkit().getScreenSize();
        Image j= im.getScaledInstance(dim.width,dim.height, Image.SCALE_DEFAULT);
        ImageIcon img = new ImageIcon(j);
        
        jLabel3.setIcon(img);
        jLabel3.setSize(DisplayMenu.jDesktopPane1.getWidth(), DisplayMenu.jDesktopPane1.getHeight());
        
        
        try
        {
            
            sub_id=sid;
            mainQ=mainquest;
            exam_id=eid;
            tol=ttl;
            
            connect_me.st=connect_me.con.createStatement();
            sql="select sub_name from subject where sub_id="+sub_id;
            connect_me.rs=connect_me.st.executeQuery(sql);
            if(connect_me.rs.next())
            {
                sub.setText(connect_me.rs.getString(1));
            }
            connect_me.st.close();
            subject=sub.getText();
            connect_me.st=connect_me.con.createStatement();
            sql="select distinct(f.format_id) from format f,exam_type e where f.exam_id=e.exam_id and e.ttl_mrks="+tol+" and e.noq="+mainQ+" and e.sub_id="+sub_id+"";
            //JOptionPane.showMessageDialog(rootPane, sql);
            connect_me.rs=connect_me.st.executeQuery(sql);
            while(connect_me.rs.next())
            {
                cmbFormat.addItem(connect_me.rs.getString(1));
            }
            cmbFormat.setSelectedIndex(-1);
            connect_me.st.close();
            
            
            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        cmbFormat = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        showFormat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Format = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sub = new javax.swing.JTextField();
        view = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Genrate Paper");
        setVisible(true);

        jPanel1.setLayout(null);

        jButton1.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        jButton1.setText("Define format");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(460, 70, 160, 40);

        cmbFormat.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        cmbFormat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFormatItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbFormat);
        cmbFormat.setBounds(150, 70, 150, 30);

        jLabel2.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        jLabel2.setText("Format");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(70, 80, 70, 20);

        showFormat.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        showFormat.setText("Show Format");
        showFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFormatActionPerformed(evt);
            }
        });
        jPanel1.add(showFormat);
        showFormat.setBounds(320, 70, 130, 40);

        Format.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        Format.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Main Question", "Sub Questions", "Unit", "Marks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Format);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(100, 140, 440, 250);

        jButton2.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        jButton2.setText("Generate Paper");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(130, 420, 160, 50);

        jLabel1.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        jLabel1.setText("Subject");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(70, 30, 60, 16);

        sub.setEditable(false);
        sub.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subActionPerformed(evt);
            }
        });
        jPanel1.add(sub);
        sub.setBounds(150, 20, 220, 40);

        view.setFont(new java.awt.Font("Modern No. 20", 1, 14)); // NOI18N
        view.setText("View Paper");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        jPanel1.add(view);
        view.setBounds(310, 420, 250, 50);

        jLabel3.setText("jLabel3");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(0, 0, 630, 500);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-650)/2, (screenSize.height-535)/2, 650, 535);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int max=tol/mainQ;
       
        d=DisplayMenu.jDesktopPane1.getSize();
        FrmFormat f=new FrmFormat(mainQ,sub_id,exam_id,max);
        f.setSize(d);
        f.setPreferredSize(d);
        f.setBounds(0,0,f.getWidth(),f.getHeight());
        DisplayMenu.jDesktopPane1.add(f);
        f.show();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbFormatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFormatItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbFormatItemStateChanged

    private void showFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFormatActionPerformed
        // TODO add your handling code here:
        if(cmbFormat.getSelectedIndex()!=-1)
        {
            try
            {
                int r=Format.getRowCount();
            for(int j=0;j<r;j++)
            {
                Format.setValueAt("", j, 0);
                Format.setValueAt("", j, 1);
                Format.setValueAt("", j, 2);
                Format.setValueAt("", j, 3);
            }
                int i=0;
                connect_me.st= connect_me.con.createStatement();
                sql="select mainq,subq,unit,marks from format where format_id='"+cmbFormat.getSelectedItem()+"'";
                connect_me.rs= connect_me.st.executeQuery(sql);

                while(connect_me.rs.next())
                {

                    Format.setValueAt(connect_me.rs.getString(1), i, 0);
                    Format.setValueAt(connect_me.rs.getString(2), i, 1);
                    Format.setValueAt(connect_me.rs.getString(3), i, 2);
                    Format.setValueAt(connect_me.rs.getString(4), i, 3);

                    i++;

                }
                connect_me.st.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, e.toString());
            }
        }

    }//GEN-LAST:event_showFormatActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            if(cmbFormat.getSelectedIndex()==-1)
            {
                JOptionPane.showMessageDialog(rootPane, "Please Select Format");
                return;
            }
            connect_me.st=connect_me.con.createStatement();
            connect_me.rs=connect_me.st.executeQuery("select count(unit) from format where format_id='"+cmbFormat.getSelectedItem()+"'");
            if(connect_me.rs.next())
            {
                fin=connect_me.rs.getInt(1);
            }
            connect_me.st.close();

            //JOptionPane.showMessageDialog(rootPane, fin+"");

            final_qid=new int[fin];
            funit=new int[fin];
            fmarks=new int[fin];
            fmainq=new int[fin];
            fsubq=new int [fin];

            int z=0;
            connect_me.st=connect_me.con.createStatement();
            connect_me.rs=connect_me.st.executeQuery("select mainq,subq,unit,marks from format where format_id='"+cmbFormat.getSelectedItem()+"'");
            while(connect_me.rs.next())
            {
                fmainq[z]=connect_me.rs.getInt(1);
                fsubq[z]=connect_me.rs.getInt(2);
                funit[z]=connect_me.rs.getInt(3);
                fmarks[z]=connect_me.rs.getInt(4);
                z++;
            }
            connect_me.st.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }

        int x=0, temp=0,unit=0;
        int []qid;

        int final_cnt=0;
        boolean flag= false;

        for(int q=0;q<funit.length;q++)
        {
            try
            {
                connect_me.st= connect_me.con.createStatement();
                connect_me.rs= connect_me.st.executeQuery("select count(qid) from qmaster where sub_id="+sub_id+" and unit="+funit[q]+" and marks="+fmarks[q]);
                if(connect_me.rs.next())
                {
                    x= connect_me.rs.getInt(1);
                }
                connect_me.st.close();
                
                connect_me.st=connect_me.con.createStatement();
                connect_me.rs=connect_me.st.executeQuery("select count("+funit[q]+") from format where format_id='"+cmbFormat.getSelectedItem()+"' and unit="+funit[q]+" and marks="+fmarks[q]);
                if(connect_me.rs.next())
                {
                    unit=connect_me.rs.getInt(1);
                }
                connect_me.st.close();
                if(x<unit)
                {
                    JOptionPane.showMessageDialog(rootPane, "Insufficient questions");
                    JInternalFrame []b= DisplayMenu.jDesktopPane1.getAllFrames();
                    for(int i=0;i<b.length; i++)
                    {
                        b[i].dispose();
                    }
                    d=DisplayMenu.jDesktopPane1.getSize();
                    FrmQuestions s=new FrmQuestions(sub_id,funit[q],fmarks[q],mainQ,exam_id,tol);
                    s.setSize(d);
                    s.setPreferredSize(d);
                    s.setBounds(0,0,s.getWidth(),s.getHeight());
                    DisplayMenu.jDesktopPane1.add(s);
        
                    s.addel.setSelectedIndex(0);
                    return;
                }

            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex.toString());
            }
            
            
            
            
            qid=new int[x];
            int i=0;
            try
            {
                connect_me.st= connect_me.con.createStatement();
                connect_me.rs= connect_me.st.executeQuery("select qid from qmaster where sub_id="+sub_id+" and unit="+funit[q]+" and marks="+fmarks[q]);
                while(connect_me.rs.next())
                {
                    qid[i]= connect_me.rs.getInt(1);
                    i++;
                }
                connect_me.st.close();

                temp=R.nextInt(qid.length);
                while(flag==false)
                {
                    for(int j=0;j<final_qid.length;j++)
                    {
                        if(final_qid[j]==qid[temp])
                        {
                            flag=true;
                            break;
                        }
                    }
                    if(flag==false)
                    {
                        break;
                    }
                    if(flag==true)
                    {
                        temp=R.nextInt(qid.length);
                        flag=false;
                    }
                }

                if(flag==false)
                {
                    final_qid[q]=qid[temp];
                    final_cnt++;
                }
                //s+=final_qid[q]+" ";
                //JOptionPane.showMessageDialog(rootPane, "Q no " +final_qid[q] );

            }

            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex.toString());
            }

        }//end of for

        //table for generated question
        try
        {
            String eid="E_"+exam_id.substring(2);

            ppr_id=eid;
            connect_me.st=connect_me.con.createStatement();
            connect_me.rs=connect_me.st.executeQuery("select semester from subject where sub_id="+sub_id);
            if(connect_me.rs.next())
            {
                ppr_id+="_"+sub_id+ "_"+ connect_me.rs.getString(1);
            }
            connect_me.st.close();

        }//partial ppr_id generated
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }

        ppr_id=("p"+connect_me.q_ppr_id()).concat("_"+ppr_id);
        try
        {
            connect_me.st=connect_me.con.createStatement();
            connect_me.st.executeUpdate("insert into qppr_id values('"+ppr_id+"')");
            connect_me.st.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }

        //JOptionPane.showMessageDialog(rootPane, ppr_id);
        try
        {
            connect_me.st=connect_me.con.createStatement();
            //ppr=ppr.concat("_"+  s);
            //JOptionPane.showMessageDialog(rootPane,"create table "+ppr_id+" (exam_id varchar(10),mainq int,subq int,question varchar(500),marks int)" );
            connect_me.st.executeUpdate("create table "+ppr_id+" (exam_id varchar(10),mainq int,subq int,question varchar(500),marks int)");
            connect_me.st.close();

            for(int i=0;i<funit.length;i++)
            {
                connect_me.st=connect_me.con.createStatement();
                connect_me.st1=connect_me.con1.createStatement();
                String quest="";
                connect_me.rs1=connect_me.st1.executeQuery("select question from qmaster where qid="+final_qid[i]);
                if(connect_me.rs1.next())
                {
                    quest=connect_me.rs1.getString(1);
                }
                connect_me.st1.close();

                //JOptionPane.showMessageDialog(rootPane, "insert into "+ppr+" values('"+exam_id+"',"+fmainq[i]+","+fsubq[i]+",'"+quest+"',"+ fmarks[i]);
                connect_me.st.executeUpdate("insert into "+ppr_id+" values('"+exam_id+"',"+fmainq[i]+","+fsubq[i]+",'"+quest+"',"+ fmarks[i]+")");

                connect_me.st.close();
            }
            JOptionPane.showMessageDialog(rootPane, ppr_id+" generated");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void subActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subActionPerformed

    public void generatepdf() {
        
            String branch="";
            int semester=0;
            String D="",su="",tm="";
            
            try
            {
                connect_me.st=connect_me.con.createStatement();
                sql="select stream.stream_name,subject.semester from subject inner join stream on subject.stream_id=stream.stream_id where sub_id="+sub_id+"";
                connect_me.rs=connect_me.st.executeQuery(sql);
                if(connect_me.rs.next())
                {
                    branch=connect_me.rs.getString(1);
                    semester=connect_me.rs.getInt(2);
                }
                connect_me.st.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, e.toString());
            }
             try
        {
            connect_me.st=connect_me.con.createStatement();
            sql="select count(mainq) from "+ppr_id+"";
            connect_me.rs=connect_me.st.executeQuery(sql);
            if(connect_me.rs.next())
            {
                mainCount=connect_me.rs.getInt(1);
            }
            connect_me.st.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, e.toString());
        }
        
         
         su="Subject: "+subject;
         String e= "";
            try
            {
                connect_me.st= connect_me.con.createStatement();
                sql= "select etype from exam_type where exam_id='"+exam_id+"'";
                connect_me.rs= connect_me.st.executeQuery(sql);
                
                if(connect_me.rs.next())
                {
                    e= connect_me.rs.getString(1);
            
            

              
                }
                connect_me.st.close();
            }
            catch(Exception ex)
            {
                JOptionPane.showMessageDialog(rootPane, ex.toString());
            }
          
          if(e.equals("external"))
          {
              tol=100;
              
          }
         tm="Total Marks: "+tol;
         
        String sm="Semester: "+semester;
        String bn="Branch: "+branch;
        if(tol==20)
        {
            D="Duration: 1 HOUR ";
        }
        else if(tol>20&&tol<=50)
        {
            D="Duration: 2 HOURS";
        }
        else if(tol>50)
        {
            D="Duration: 3 HOURS";
        }
        
        try
        {
            FileOutputStream file = new FileOutputStream(new File(sub.getText()+"_"+ppr_id+".pdf"));
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document(PageSize.A4);
            PdfWriter.getInstance(doc, file);

            String subqs[]={"(a)","(b)","(c)","(d)"};
            
            doc.open();
            Paragraph par = new Paragraph("Bharat College Of Engineering");
            par.setAlignment(Element.ALIGN_CENTER);
            par.getFont().setStyle(Font.BOLDITALIC);
            doc.add(par);
           
            doc.add(new Paragraph(" "));
            
            PdfPTable pt=new PdfPTable(2);
            PdfPCell pt_cell;
            
                        
            String st[]=new String[]{su,tm};
            //for(int k=0;k<2;k++)
            {
                Phrase p=new Phrase(st[0]);
                p.getFont().setStyle(Font.BOLDITALIC);
                pt_cell=new PdfPCell(p);
                pt_cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                pt_cell.setBorder(0);
                pt.addCell(pt_cell);
                
                p=new Phrase(st[1]);
                p.getFont().setStyle(Font.BOLDITALIC);
                pt_cell=new PdfPCell(p);
                pt_cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                pt_cell.setBorder(0);
                pt.addCell(pt_cell);
            }
            pt.setWidthPercentage(100);
            doc.add(pt);
           // doc.add(new Paragraph(" "));
            
            PdfPTable pt1=new PdfPTable(2);
            PdfPCell pt1_cell;
            
                        
            String st1[]=new String[]{bn,D};
            //for(int k=0;k<2;k++)
            {
                Phrase p1=new Phrase(st1[0]);
                p1.getFont().setStyle(Font.BOLDITALIC);
                pt1_cell=new PdfPCell(p1);
                pt1_cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                pt1_cell.setBorder(0);
                pt1.addCell(pt1_cell);
                
                 p1=new Phrase(st1[1]);
                p1.getFont().setStyle(Font.BOLDITALIC);
                pt1_cell=new PdfPCell(p1);
                pt1_cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                pt1_cell.setBorder(0);
                pt1.addCell(pt1_cell);
                
            }
            pt1.setWidthPercentage(100);
            doc.add(pt1);
            //doc.add(new Paragraph(" "));
            
            Paragraph pa = new Paragraph(sm);
            pa.setAlignment(Element.ALIGN_LEFT);
            pa.getFont().setStyle(Font.BOLDITALIC);
            doc.add(pa);
            
            doc.add(new Paragraph(" "));
            doc.add(new Paragraph("---------------------------------------------------------------------------------------------------------------------------------"));
            
            
            float columnWidth[]={5,5,85,5};
            PdfPTable tb = new PdfPTable(4);
            tb.setWidths(columnWidth);
            //tb.setWidthPercentage(columnWidth,pgSize);
            PdfPCell tb_cell;
            
            
            
            for(int i=1;i<=mainCount;i++)
            {
                Phrase ph;
                
                
                
                int subq[],marks[];
                String qstn[];
                try
                {
                    
                    
                    connect_me.st = connect_me.con.createStatement();
                    sql = "select count(subq) from "+ppr_id+" where mainq="+i;
                    connect_me.rs = connect_me.st.executeQuery(sql);
                    if (connect_me.rs.next()) 
                    {
                        subCount = connect_me.rs.getInt(1);
                    }
                    connect_me.st.close();
                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(rootPane, ex.toString());
                    
                }   
                
                qstn=new String[subCount];
                marks=new int[subCount];

                
                try
                {
                    
                    int cnt=0;
                    connect_me.st = connect_me.con.createStatement();
                    sql = "select question,marks from "+ppr_id+" where mainq="+i;
                    connect_me.rs = connect_me.st.executeQuery(sql);
                    while (connect_me.rs.next())
                    {
                        qstn[cnt] = connect_me.rs.getString(1);
                        marks[cnt]=connect_me.rs.getInt(2);
                        cnt++;
                    }
                    connect_me.st.close();
                    
                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(rootPane, ex.toString());
                }
                
                for(int j=0;j<subCount;j++)
                {
                    if(flag)
                {
                    ph= new Phrase(i+"");
                    ph.getFont().setStyle(Font.BOLDITALIC);
                    tb_cell = new PdfPCell(ph);
                    tb_cell.setBorder(0);
                    tb.addCell(tb_cell);
                    flag=false;
                }
                else
                {
                    ph = new Phrase(" ");
                    ph.getFont().setStyle(Font.BOLDITALIC);
                    tb_cell = new PdfPCell(ph);
                    //tb_cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    tb_cell.setBorder(0);
                    tb.addCell(tb_cell);
                }
                    
                    ph= new Phrase((subqs[j])+"");
                    ph.getFont().setStyle(Font.BOLDITALIC);
                    tb_cell = new PdfPCell(ph);
                       tb_cell.setBorder(0);
                    tb.addCell(tb_cell);
                    
                    ph= new Phrase(qstn[j]);
                    ph.getFont().setStyle(Font.BOLDITALIC);
                    tb_cell = new PdfPCell(ph);
                       tb_cell.setBorder(0);
                    tb.addCell(tb_cell);
                    
                    ph= new Phrase(marks[j]+"");
                    ph.getFont().setStyle(Font.BOLDITALIC);
                    tb_cell = new PdfPCell(ph);
                       tb_cell.setBorder(0);
                    tb.addCell(tb_cell);
                }
                flag=true;
            }
            
            doc.add(tb);
            doc.close();
            file.close();
   
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, ex.toString());
            
        }
        
        try
        {
             if (Desktop.isDesktopSupported())
             {
                    File f = new File( sub.getText()+"_"+ppr_id+".pdf");
                    Desktop.getDesktop().open(f);
              }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.toString());
        }
        }
    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        
            generatepdf();
        
    }//GEN-LAST:event_viewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Format;
    private javax.swing.JComboBox cmbFormat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton showFormat;
    private javax.swing.JTextField sub;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
